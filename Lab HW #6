#1



#include <stdio.h>
#include <string.h>
// defining global max value as 20
#define MAX 25


// Declaring queue for strings
char queue[MAX][MAX];
//Declaring a temporary string
char temp[MAX];
//declaring variables for queue operations
int front = -1, rear = -1;
// Definition of enqueue function
void enqueue(char* ptr) {
   // if no elements are there in queue..
   if (front == -1 && rear == -1)
       // ..then make front and rear as 0
       front = rear = 0;
   // if queue is not empty then ..
   else
       // ..increment queue by 1 to store another element
       rear = rear + 1;
   // enque given element at rear position
   strcpy(queue[rear], ptr);
}
char* dequeue() {
   // we deque an element from queue
   // so we remove first(front) element, store front element in temp
   strcpy(temp, queue[front]);
   // if no elements are there in queue..
   if (front == rear)
       // then make front and rear as -1
       front = rear = -1;
   //if elements present
   else
       // we remove front element
       // so make next element as front
       front = front + 1;
   // returning front element
   return temp;
}
// Definition for genBin function to generate binary numbers
void genBin(unsigned int n) {
   char str1[MAX],str2[MAX];
   //Initially we enqueue 1 to queue
   enqueue("1");
   // loop for iterating through all numbers upto n
   for(unsigned int i=0;i<n;i++){
       // first deque an element from queue
       // store it in a string
       strcpy(str1,dequeue());
       // print that element
       printf("%s ,", str1);
       // now copy this string to anohter string
       strcpy(str2,str1);
       // concat 0 to the string1
       strcat(str1,"0");
       // concat 1 to the string2
       strcat(str2,"1");
       // Add both string to the queue
       enqueue(str1);
       enqueue(str2);
}
}

int main() {
unsigned int n;
// prompt user for input a number
printf("Enter the value : ");
scanf("%u", &n);
//Call the function genBin to generate nbinary numbers
genBin(n);
return 0;
}






-----------------------------------------------------------------------------------------------------------------------------------




#2




#include<stdio.h>
#include<string.h>
#define MAX 100

int top=-1;
char stack[MAX];
void push(char a);
char pop();
char* rev(char a[]);

//Main Function Takes Input From User and Gives Output
int main()
{
   char a[MAX];
   printf("Enter string : ");
   scanf("%s",a);   //Taking Input From User
   //Printing Output
   if(strlen(a)>0)
       printf("Reverse String : %s",rev(a));
   else
   {
       printf("Enter Valid String");
       return 0;
   }
}
//Push Operation Of Stack
void push(char a)
{
   if(top==MAX-1)
       printf("Stack Overflow");
   else
       stack[++top]=a;  
}
//Pop Operation Of Stack
char pop()
{
   if(top == -1)
       printf("\n Stack Underflow");
   else
       return stack[top--];
       
       return 0;
}
//Reverse Function Takes Character array and returns reverse string by using stack operations
char* rev(char a[])
{
   int i;
   for(i=0;a[i]!='\0';i++)
       push(a[i]);       //Calling push()
   for(i=0;a[i]!='\0';i++)
       a[i]=pop();       //Calling pop()
   return a;
}








------------------------------------------------------------------------------------------------------------------------------------



#3



#include<stdio.h>

//function prototype
void rev(int queue[], int n);
void print(int q[], int size);

//function implementation
void rev(int queue[], int n)
{
   int i = 0;
   int j = n - 1;
   while (i < j)
   {
       int temp =queue[i];
       queue[i] = queue[j];
       queue[j] = temp;
       i++;
       j--;
   }
}
//print the queue

void print(int q[], int size)
{
   for (int i = 0; i < size; i++)
   {
       printf("%d ", q[i]);
   }
   printf("\n");
}
int main()
{
   int q[] = { 1,2,3,4,5,6,7,8,9,10 };
   //call to print function
   printf("Original queue:\n");
   print(q, 10);
   int n = 5;
   //call reverse function
   rev(q, n);
   printf("After reverse from 0 to %d\n", n);
   //call print
   print(q, 10);

   return 0;
}





------------------------------------------------------------------------------------------------------------------------------------



#4




#include<stdio.h>

const int size=6;
char queue[6];
int front,rear;
void enqueue(char x)
{
if((rear-front+1+size)%size==0)
{
//queue is full
return;
}
else
{
rear=(rear+1)%size;
queue[rear]=x;
if(front==-1)
front=rear;
}
}
void dequeue(char x)
{
if(front==-1)
{
//queue is empty
return;
}
else
{
if(front==rear)
{
//queue has one element
if(queue[front]==x)
{
//element to be delete exist in queue
front=rear=-1;
}
else
{
//element not found in queue
return;
}
}
else
{
while((front!=rear)&&(queue[front]!=x))
front=(front+1)%size;
if(front==rear)
{
if(queue[front]==x)
{
front=rear=-1;
}
else
{
//element not found
return;
}
}
else
{
if(queue[front]==x)
{
front=(front+1)%size;
}
else
{
return;
}
}
}
}
}
int main()
{
front=-1;
rear=-1;
/***a***/
enqueue('d');
enqueue('e');
enqueue('b');
enqueue('g');
enqueue('h');
/***b***/
dequeue('d');
dequeue('e');
/***c***/
enqueue('i');
enqueue('j');
enqueue('k');
enqueue('l');
enqueue('m');
/***d***/
dequeue('b');
/***e***/
enqueue('n');
enqueue('o');
enqueue('p');
enqueue('q');
enqueue('r');
printf("front=%d \nrear=%d\n",front,rear);
}








