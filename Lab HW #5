#2



#include <stdio.h>
#include <stdlib.h>
#define size 15


void push(int n);
char pop();
//void display();
int stack[size],top=-1;
void rev(char *s);
int main()
{
   char str[]="reward";
   rev(str);
}
void rev(char *s)
{
   int i=0;
   for(i=0;s[i]!='\0';i++)
   {
       push(s[i]);
   }
   i=0;
   char ret[100]="";
   char temp=pop();
   while(temp!=-1)
   {
       ret[i]=temp;
       i++;
       temp=pop();
   }
   printf("the reverse of %s is %s\n",s,ret);
}
void push(int n)
{
   if(top==size-1)
   {
       printf("the stack is full so insertion is not possible\n");
   }
   else
   {
       top++;
       stack[top]=n;
   }
}
char pop()
{
   char m;
   if(top==-1)
   {
       return -1;
   }
   else
   {
       m=stack[top];
       top--;
       return m;
   }
}





----------------------------------------------------------------------------------------------------------------------------------





#3




#include <stdio.h>
#include<string.h>

int front = -1; //front of stack
//push method for stack
void push(int stack[],int x){
front++;
stack[front] = x;
}

//pop method for stack
void pop(){
if(front == -1){
return ;
}
front--;
}

int main() {
// for storing the input expression
char input[1000006];
printf("Enter a expression:\n");
scanf("%s",input);
int length = strlen(input); //storing the length of input expression
int i; //iterator for loop
int stack[length]; //imitating stack in c which stores frontex of parantheses
memset(stack,-1,sizeof(stack));// initalizing stack with -1
for(i = 0; i < length; i++){
//if it is opening bracket it is pushed in stack always
if(input[i] == '('){
push(stack,i);
}
//if closing bracket
else if(input[i] == ')'){
//if stack is empty we will push it everytime because it will be unmatched always in future
if(front == -1){
push(stack,i);
}
//if stack is not empty but top of stack has closing bracket only then also we push
else if(front != -1 && input[stack[front]] == ')'){
push(stack,i);
}
//if stack is not empty but top of stack has opening bracket only then wepop
else if(front != -1 && input[stack[front]] == '(') {
pop();
}
}
}
//chaning input string with leftover values in stack

//all the leftover indexes in stack is unmateched parantheses index.
for(i = 0; i <= front; i++){
if(input[stack[i]] == '(')
input[stack[i]] = '$';
if(input[stack[i]] == ')')
input[stack[i]] = '?';
}

//chainging input string to highlight only umatched parantheses
for(i = 0; i < length; i++){
if(input[i] != '$' && input[i] != '?')
input[i] = ' ';
}
//printing file answer string
printf("%s\n",input);

return 0;

}





--------------------------------------------------------------------------------------------------------------------------------



#4



#include <stdio.h>
#include<stdlib.h>

struct Node {
int data;
struct Node * next;
};
struct Node * S = NULL;

int max(int a, int b) {
return a > b ? a : b;
}
void push(int);
void fnew();
int main() {
push(1);
push(2);
push(-2);
push(4);
push(5);
fnew();
return 0;
}

void push(int n) {
struct Node * temp;
temp = (struct Node * ) malloc(sizeof(struct Node));
if (S == NULL) {
    S = (struct Node * ) malloc(sizeof(struct Node));
    S -> data = 0;
}
int new_data = n + max(S -> data, 0);
temp -> next = S;
temp -> data = new_data;
S = temp;
}
void fnew() {
printf("%d", S -> data);
}



















