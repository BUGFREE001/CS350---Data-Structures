#1



#include <stdio.h>
#include<stdlib.h>

typedef struct node{//defining node structure
int data;
struct node* next;
}node;

void insert_rev_index(node** head,int position,int value);//function declarations
int getcount(node *head);
void print(node* head);
int getcount(node* head){//method returns the length of list
int cnt=0;
while(head){
cnt++;
head=head->next;
}
return cnt;
}
void print(node* head){//displays list on console.
while(head){
printf("%d",head->data);
head=head->next;
printf("->");
}
printf("\n");
}
void insert_rev_index(node** head,int position,int value){//insert node at reverse index
struct node*curr=*head,*temp=NULL;
int c=1;
int count=0;
temp=(node*)malloc(sizeof(node));//get the node
temp->data=value;
temp->next=NULL;
if(*head==NULL){
*head=temp;
return;
}
else{
count=getcount(*head);
}
position=count-position+1;//get position to insert
if(position==1){//if it is at 1,then move head to next place.
temp->next=*head;
*head=temp;
return;
}
while(curr && c<position-1){//if it is not 1 move pointer to desired position
curr=curr->next;
c++;
}
if(position>(c+1)){
return;
}
if(c+1==position &&curr->next==NULL){//store the node to curr->next
curr->next=temp;
return;
}
temp->next=curr->next;
curr->next=temp;
}
int main()
{
int value,i,position;
node *head=NULL;
for(i=0;i<5;i++){
scanf("%d",&value);
insert_rev_index(&head,i,value);
}
print(head);//print list created
insert_rev_index(&head,1,123);
print(head);//print list after insertion
return 0;
}






-------------------------------------------------------------------------------------------------------------------------------------




#2




#include<stdio.h>
#include<stdlib.h>

typedef struct list
{
int info;
struct list *next;
}node;


node * concat(node *l1,node *l2)
{
   node *temp;
  
   if(l1==NULL)
   {
       return l2;
   }
   if(l2==NULL)
   {
       return l1;
   }
  
  
   temp=l1;
   while(temp->next!=NULL)
   {
       temp=temp->next;
      
   }
  
   temp->next=l2;
  
  
   return l1;
  
}

node * insert_atend(node *start,int val)
{
node *temp,*p;
p=start;
temp=(node *)malloc(sizeof(node));
temp->info=val;
temp->next=NULL;
if(start==NULL)
{
start=temp;

}
else
{
while(p->next!=NULL)
p=p->next;
p->next=temp;
}
return start;
}


void display(node *start)
{
while(start!=NULL)
{
    printf("%d ",start->info);
    start=start->next;
}

printf("\n");

}


int main()
{
   node *ls1=NULL;
   ls1=insert_atend(ls1,4);
   ls1=insert_atend(ls1,2);
   ls1=insert_atend(ls1,1);
   printf("ls1-> ");
   display(ls1);
  
  
   node *ls2=NULL;
   ls2=insert_atend(ls2,5);
   ls2=insert_atend(ls2,7);
   ls2=insert_atend(ls2,3);
   printf("ls2-> ");
   display(ls2);
  
   ls1=concat(ls1,ls2);
   printf("Cocant linklist ls1-> ");
   display(ls1);
  
return 0;
}





-----------------------------------------------------------------------------------------------------------------------------------




#3



#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

struct node {
    int data;
    struct node *next;
};
struct node1 {
    char data;
    struct node1 *next;
};

struct node *head = NULL;
struct node *current = NULL;
struct node1 *head1 = NULL;
struct node1 *current1 = NULL;
//display the list
void printList() {
    
    struct node *ptr = head;
    
    printf("\n[head] =>");
    //start from the beginning
    while(ptr != NULL) {
        printf(" %d =>",ptr->data);
        ptr = ptr->next;
    }
    
    printf(" [null]\n");
}
void printList1() {
    
    struct node1 *ptr = head1;
    
    printf("\n[head1] =>");
    // start from the beginning
    while(ptr != NULL) {
        printf(" %c =>",ptr->data);
        ptr = ptr->next;
    }
    
    printf(" [null]\n");
}
int max_int_list(struct node *head){
    struct node *ptr = head;
    int temp = ptr->data;
    ptr=ptr->next;
    while(ptr!=NULL)
    {
        if(ptr->data>temp)
        {
            temp = ptr->data;
        }
        ptr=ptr->next;
    }
    return temp;
}
int max_char_list(struct node1 *head1){
    struct node1 *ptr=head1;
    char temp = ptr->data;
    ptr=ptr->next;
    while(ptr!=NULL){
        if(ptr->data>temp){
            temp=ptr->data;
        }
        ptr=ptr->next;
    }
    return temp;
}

int min_int_list(struct node *head){
    struct node *ptr=head;
    int temp=ptr->data;
    ptr=ptr->next;
    while(ptr!=NULL){
        if (ptr->data<temp){
            temp=ptr->data;
        }
        ptr=ptr->next;
    }
    return temp;
}

int min_char_list(struct node1 *head1){
    struct node1 *ptr=head1;
    char temp=ptr->data;
    ptr=ptr->next;
    while(ptr!=NULL){
        if(ptr->data<temp){
            temp = ptr->data;
        }
        ptr=ptr->next;
    }
    return temp;
}

//insert link at the first location
void insert(int data) {
    //creat a link
    struct node *link = (struct node*) malloc(sizeof(struct node));
    //link->key = key;
    link->data=data;
    
    //point it to the old first node
    link->next = head;
    
    //point first to new first node
    head = link;
}

void insert1(char data) {
    //create a link
    struct node1 *link = (struct node1*) malloc(sizeof(struct node1));
    
    //link->key =key;
    link->data = data;
    
    //point it to the old first node
    link->next=head1;
    
    //point first to the new first node
    head1=link;
    
}

int main(){
    int n;
    printf("Please enter the no. of node ");
    scanf("%d",&n);
    int flag;
    printf("Enter 1 for int list and 0 for char list ");
    scanf("%d",&flag);
    if (flag==1){
        int i=0;
        while(n>i){
            int temp;
            printf("Enter %d element= ", i+1 );
            scanf("%d",&temp);
            insert(temp);
            i=i+1;
        }
        printList();
        printf("The max element is %d\n", max_int_list(head));
        printf("The min element is %d\n", min_int_list(head));
    }
    else{
        int j=0;
        while(n>j){
            char temp1;
            printf("Enter %d element \n", j+1);
            getchar();
            temp1=getchar();
            insert1(temp1);
            j=j+1;
        }
        
        
        printList();
        printf("The max element is %c\n", max_char_list(head1));
        printf("The min element is %c\n", min_char_list(head1));
    }
    return 0;
    
    
}





---------------------------------------------------------------------------------------------------------------------------------



#4


























