#1



#include<stdio.h>
#include<stdlib.h> 
//defining struct for a nest, the node of our circular linked list
struct nest{
    int label;
    int checked;
    struct nest* next;
};typedef struct nest nest;
//returns pointer to an instance of nest
nest* Nest(int label){
    struct nest* n=malloc(sizeof(nest));
    n->label=label;
    n->checked=0;
    n->next=NULL;
    return n;
}
//defining circular linked list data structure
struct circular_linked_list{
    struct nest* head;//head of the circular linked list
    int wolf_skip;//keeps track of how many nests wolf has to skip
    int size;//no. of nests in circular linked list
    struct nest* wolf_at_nest;
};typedef struct circular_linked_list circular_linked_list;
//returns pointer to an instance of circular linked list of size no. of nests
circular_linked_list *CLL(int size){
        struct circular_linked_list* cll=malloc(sizeof(circular_linked_list));
        cll->size=size;
        cll->wolf_skip=0;
        if(size==0)
            cll->head=NULL;
        else{
            cll->head=Nest(1);
            struct nest *temp=cll->head;
            int label=1;
            while(++label<=size){
                temp->next=Nest(label);
                temp=temp->next;
            }
            temp->next=cll->head;
    }
    return cll;
} 
//function to mark a nest checked by wolf
void wolf_checks(circular_linked_list* cll){
    if(cll->wolf_skip==0){
        cll->wolf_at_nest=cll->head;
    }
    else{
        int i;
        for(i=0;i<cll->wolf_skip;i++)
            cll->wolf_at_nest=cll->wolf_at_nest->next;
        cll->wolf_at_nest=cll->wolf_at_nest->next;
    }
    cll->wolf_skip+=1;
    cll->wolf_at_nest->checked=1;
}
//prints the safety status of all nests
void check_safe_nests(circular_linked_list* cll){
    struct nest *temp = cll->head;
    while(cll->size--){
        if(temp->checked==0)
            printf("Nest %2d  safe     !\n",temp->label);
        else
            printf("Nest %2d  not safe !\n",temp->label);
        temp=temp->next;
    }
}

int main(){ 
    //creating a circular linked list of 10 nests
    struct circular_linked_list* nests=CLL(10); 
    //inputting no. of times wolf checks
    printf("Enter the number of times a wolf checks the nests: ");
    int n;
    scanf("%d",&n); 
    //making the wolf check n times
    while(n--)
        wolf_checks(nests); 
    //traversing and printing safety status of all nests
    check_safe_nests(nests);
}





--------------------------------------------------------------------------------------------------------------------------------



#2




#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>


struct Node
{
char data;
struct Node* next;
};
  
/* A utility function to insert a node at the beginning of
a linked list*/
void push(struct Node** head_ref, char new_data);
  
/* A utility function to check if given data is present in a list */
bool isPresent(struct Node *head, char data);
/* Function to get common elements of two linked lists
l and m */
struct Node *commElem(struct Node *l,
struct Node *m)
{
struct Node *result = NULL;
struct Node *t1 = l;
  
// Traverse l and search each element of it in
// list2. If the element is present in m, then
// insert the element to result
  while (t1 != NULL)
{
if (isPresent(m, t1->data))
{
   if(!isPresent(result,t1->data))
   {
   push (&result, t1->data);   
   }
}
t1 = t1->next;
}

return 0;
}
/* A utility function to insert a node at the begining of a linked list*/
void push (struct Node** head_ref, char new_data)
{
/* allocate node */
struct Node* new_node =
(struct Node*) malloc(sizeof(struct Node));
  
/* put in the data */
new_node->data = new_data;
  
/* link the old list off the new node */
new_node->next = (*head_ref);
  
/* move the head to point to the new node */
(*head_ref) = new_node;
}
  
/* A utility function to print a linked list*/
void printList (struct Node *node)
{
while (node != NULL)
{
printf ("%c ", node->data);
node = node->next;
}
}
/* A utility function that returns true if data is
present in linked list else return false */
bool isPresent (struct Node *head, char data)
{
struct Node *t = head;
while (t != NULL)
{
if (t->data == data)
return 1;
t = t->next;
}
return 0;
}
int main()
{
/* Start with the empty list */
struct Node* l = NULL;
struct Node* m = NULL;
struct Node* common = NULL;
while(1){
   char c1,c2;
   printf("Press 1 to enter in list l\n");
   printf("Press 2 to enter in list m\n");
   printf("press 3 to exit\n");
   printf("enter your choice");
   int ch;
   scanf("%d",&ch);
   if(ch==1)
   {
   printf("enter the character for list l\n");
   fflush(stdin);
scanf("%c",&c1);
   push(&l, c1);   
       }
           if(ch==2)
   {
   printf("enter the character for list m\n");
   fflush(stdin);
scanf("%c",&c2);
   push(&m, c2);   
       }
       if(ch==3)break;
   }
common=commElem(l,m);
printf ("\n First list is \n");
printList (l);
  
printf ("\n Second list is \n");
printList (m);
  
printf ("\n Intersection list is \n");
printList (common);
   return 0;
}







----------------------------------------------------------------------------------------------------------------------------------





#3




#include <stdio.h>
#include<stdlib.h>
#include<stdbool.h>
struct node
{
int data;
struct node *next;
};

void add_node( struct node **head,int value)
{
struct node *temp=(struct node*) malloc(sizeof(struct node));
temp->data=value;
temp->next=*head;
if((*head)==NULL)
{
temp->next=temp;
(*head)=temp;
}
else
{
struct node *t2=(*head);
while(t2->next != (*head))
{
t2=t2->next;
}
t2->next=temp;
(*head)=temp;
}
}

bool check_prime(int value)
{
for(int i=2;i<value;i++)
{
if(value%i==0) return false;
}
return true;
}

void delete_prime_CLL(struct node **head)
{
struct node *temp=(*head);
struct node *temp2=(*head);
struct node * prev=NULL;
if(* head==NULL) return;
do
{
if (check_prime(temp->data))
{
if(prev==NULL)
{
while(temp2->next!=(*head))
{
temp2=temp2->next;
}
temp2->next=temp->next;
(*head)=temp->next;
delete_prime_CLL(head);
return;
}
else
{
prev->next=temp->next;
}
}
prev=temp;
temp=temp->next;
} while(temp!=(*head));
}

void print(struct node *head)
{
struct node *temp=head;
if(head==NULL) return;
printf("head-> ");
do
{
printf("%d ->",temp->data);
temp=temp->next;
} while(temp!=head);
printf("head");
printf("\n");
}
int main()
{
struct node *head=(struct node*) malloc(sizeof(struct node));
head=NULL;
add_node(&head,14);
add_node(&head,15);
add_node(&head,12);
add_node(&head,13);
add_node(&head,5);
print(head);
delete_prime_CLL(&head);
print(head);
return 0;
}



----------------------------------------------------------------------------------------------------------------------------------




#4



#include<stdio.h>
#include<stdlib.h>

struct Node
{
int data;
struct Node *next;
};
void splitList(struct Node *head, struct Node **head1_ref,struct Node **head2_ref)
{
struct Node *slow_ptr = head;
struct Node *fast_ptr = head;
  
if(head == NULL)
return;

while(fast_ptr->next != head &&
fast_ptr->next->next != head)
{
fast_ptr = fast_ptr->next->next;
slow_ptr = slow_ptr->next;
}   
  
if(fast_ptr->next->next == head)
fast_ptr = fast_ptr->next;   
  
*head1_ref = head;   

if(head->next != head)
*head2_ref = slow_ptr->next;
  
  
fast_ptr->next = slow_ptr->next;
  
  
slow_ptr->next = head;
}
  
void push(struct Node **head_ref, int data)
{
struct Node *ptr1 = (struct Node *)malloc(sizeof(struct Node));
struct Node *temp = *head_ref;
ptr1->data = data;   
ptr1->next = *head_ref;
  
if(*head_ref != NULL)
{
while(temp->next != *head_ref)
temp = temp->next;   
temp->next = ptr1;
}
else
ptr1->next = ptr1;
*head_ref = ptr1;
}
  
void printList(struct Node *head)
{
struct Node *temp = head;
if(head != NULL)
{
printf("\n");
do {
printf("%d ", temp->data);
temp = temp->next;
} while(temp != head);
}
}
  
int main()
{
int list_size, i;
  
struct Node *head = NULL;
struct Node *head1 = NULL;
struct Node *head2 = NULL;   
push(&head, 12);
push(&head, 56);
push(&head, 2);
push(&head, 11);
  
printf("Original Circular Linked List");
printList(head);   

splitList(head, &head1, &head2);

printf("\nFirst Circular Linked List");
printList(head1);   
  
printf("\nSecond Circular Linked List");
printList(head2);   
  
getchar();

return 0;

}





-----------------------------------------------------------------------------------------------------------------------------------




#5




#include <stdio.h>
#include <stdlib.h>

/* Link list node */
struct Node {
   char d;
   struct Node* left;
   struct Node* right;
};

// function to find the size of
// Doubly Linked List
int size(struct Node* head_ref)
{
   struct Node* curr = head_ref;
   int sz = 0;
   while (curr != NULL) {
       curr = curr->right;
       sz++;
   }
   return sz;
}

/* Function to Display linked list */
void DisplayList(struct Node* node)
{
   while (node->right != NULL) {
       printf("%c <=> ",node->d);
       node = node->right;
   }
   printf("%c <=> ",node->d);
}

// Function to insert a node at the
// beginning of the Doubly Linked List
void push(struct Node** head_ref, int new_data)
{
   struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
   new_node->d = new_data;
   new_node->left = NULL;
   new_node->right = (*head_ref);
   if ((*head_ref) != NULL)
       (*head_ref)->left = new_node;
   *head_ref = new_node;
}

// Function to rotate a doubly linked
// list clockwise and update the head
void rotate_DLL(struct Node** head_ref, int N)
{
   int sz;
   sz=size(*head_ref);
   /* If N is greater than the size of Doubly
   Linked List, we have to deduce it in the range
   of Doubly linked list size by taking modulo with the
   length of the list.*/
   N = N%sz;

   /* We will update N by subtracting it's value length of
   the list. After this the question will reduce to
   counter clockwise rotation of linked list to N places*/
   N = sz - N;

   if (N == 0) // result remain same
       return;

   struct Node* current = *head_ref;

   // current will either point to Nth
   // or NULL after this loop.
   int count = 1;
   while (count < N && current != NULL) {
       current = current->right;
       count++;
   }

   // If current is NULL, N is greater
   // than or equal to count of nodes
   // in linked list
   // Don't change the list in this case
   if (current == NULL) // N>=size(list) no change for this case.
       return;

   // current points to Nth node.
     
   struct Node* NthNode = current;

   // current will point to last node
  
   while (current->right != NULL)
       current = current->right;

   // Change next of last node to previous
   // head.
   current->right = *head_ref;

  
   (*head_ref)->left = current;

  
   *head_ref = NthNode->right;

   // Change left of New Head node to NULL
   // Because left of Head Node in Doubly
   // linked list is NULL
   (*head_ref)->left = NULL;

   // Change right of Nth node to NULL
  
   NthNode->right = NULL;
}


// Driver code
int main(void)
{
   /* Start with the empty list */
   struct Node* head = NULL;

   /* Create the doubly linked
   list c<->i<->v<->i<->c */
   push(&head, 'c');
   push(&head, 'i');
   push(&head, 'v');
   push(&head, 'i');
   push(&head, 'c');

   int N = 3; //change values of N to clockwise rotate the list starting from Nth
   //node . make sure that N should be less or equal the size of the list.

  

   printf("Given Doubly linked list \n");
   DisplayList(head);
   rotate_DLL(&head, N); //rotate_DLL(list,3)

   printf("\nRotated Linked list clockwise \n");
   DisplayList(head); // Display the resulted list.

   return 0;
}
