#1



#include<stdio.h>
#include<stdlib.h>

typedef struct node{
   char data;
   struct node*next;
} node;

node* append(node*head ,char item){
   node*newNode = (node*)malloc(sizeof(node));
   newNode->data = item;
   newNode->next = NULL;
  
   if(head==NULL)return newNode;
  
   node*current = head;
   while(current->next!=NULL)current = current->next;
  
   current->next = newNode;
   return head;
}
node* insertElem(node*head , int position , char item){
   node*newNode = (node*)malloc(sizeof(node));
   newNode->data = item;
   newNode->next = NULL;
  
   if(position ==1){
       newNode->next = head;
       head = newNode;
       return head;
   }
   node*current = head;
  
   while(current!=NULL && position>2){
       current = current->next;
       position--;
   }
  
   if(current == NULL)return head;
   newNode->next = current->next;
   current->next = newNode;
   return head;
}

float Average_List(node* head){
   float sum=0;
   int count = 0;
  
   while(head){
       sum+=head->data;
       count++;
       head = head->next;
   }
  
   if(count==0)return 0;
   return sum/count;
}

void printList(node*head){
   while(head){
       printf("%c->",head->data);
       head = head->next;
   }
   printf("NULL\n\n");
}

int main(){
   node* head = NULL;
  
   head = append(head , 'S');
   head = append(head , 't');
   head = append(head , 'i');
   head = append(head , 'n');
   head = append(head , 'g');
  
   printf("List before insertion\n");
   printList(head);
      
   head = insertElem(head , 3 , 'r');
   printf("List after insertion\n");
   printList(head);
   return 0;
}




--------------------------------------------------------------------------------------------------------------------------------



#2



#include<stdio.h>
#include<stdlib.h>

typedef struct node{
   int data;
   struct node*next;
} node;

node* append(node*head ,int item){
   node*newNode = (node*)malloc(sizeof(node));
   newNode->data = item;
   newNode->next = NULL;
  
   if(head==NULL)return newNode;
  
   node*current = head;
   while(current->next!=NULL)current = current->next;
  
   current->next = newNode;
   return head;
}

void printConvertedList(node*head){
   printf("Head->");
   while(head){
       if(head->data >=1 && head->data<=26)
           printf("%c",head->data-1 + 'A');
       else printf("#");
       printf("->");
       head = head->next;
   }
   printf("NULL\n\n");
}

int main(){
   node *List0 = NULL;
   List0 = append(List0 , 1);
   List0 = append(List0 , 2);
   List0 = append(List0 , 2);
   List0 = append(List0 , 1);
  
  
   node *List1 = NULL;
   List1 = append(List1 , 12);
   List1 = append(List1 , 2);
   List1 = append(List1 , 1);
  
   node *List2 = NULL;
   List2 = append(List2 , 1);
   List2 = append(List2 , 22);
   List2 = append(List2 , 1);
  
   node *List3 = NULL;
   List3 = append(List3 , 1);
   List3 = append(List3 , 2);
   List3 = append(List3 , 21);
  
   printf("List0 : ");
   printConvertedList(List0);
  
   printf("List1 : ");
   printConvertedList(List1);
  
   printf("List2 : ");
   printConvertedList(List2);
  
   printf("List3 : ");
   printConvertedList(List3);
  
   return 0;
}




------------------------------------------------------------------------------------------------------------------------------------




#3




#include <stdio.h>
#define ll long long
int a[1000];
int main()
{
   int n,sum=0,i,j;
   printf("Enter No of elements : ");
   scanf("%d",&n);// input number of elements
   printf("Enter elements : ");
   for(i=0;i<n;i++)
   {
       scanf("%d",&a[i]);
       sum+=a[i];//takeing sum of all elements
   }
   //note that to divide into 2 subsets ,we should have even sum= sum/2+sum/2
   if(sum%2==1)
       printf("impossible\n");
   else
   {
       int req=sum/2;//required sum must be sum/2
       int ans=0;
       //check for the subset which have sum =req
       for(i=1;i<(1<<n);i++) //we have 2^n subsets
       {
           //every subset is represented by binary representation of i
           int cursum=0;
           for(j=0;j<n;j++)
           {
               if(i&(1<<j)) //if j th bit is set in i then we include a[j] in our subset
               {
                   cursum+=a[j];
               }
           }  
           if(cursum==req)//if we found any subset with sum=req,the other subset also have sum=req
           {   ans=i;
               break;
           }
       }
       if(ans==0)//if answer is 0 ,that means we dont found any subset
           printf("impossible\n");
       else
       {
           //print the first subset
           printf("set 1: ");
           for(i=0;i<n;i++)
           {
               if(ans&(1<<i))
                   printf("%d ",a[i]);
           }
           printf("\nset 2: ");
           ans=~ans;//to get binary representation of other subset we use ~
           //print the second subset
           for(i=0;i<n;i++)
           {
               if(ans&(1<<i))
                   printf("%d ",a[i]);
           }
           printf("\n");
       }
   }
}













#5




#include<stdio.h>
#include<stdbool.h>
// main function
int main(){
   // n-number of values
   int n,i,j;
   printf("Enter value N: ");
   scanf("%d",&n);
   // array of size nx2
   int arr[n*2];
   // array to store checked values
   int existance[n];
   int index=0;
  
   printf("Enter %d values: ",2*n);
   // taking user inputs
   for(i=0;i<(n*2);i++){
       scanf(" %d",&arr[i]);
   }
   printf("\nFollowing Are Sequences\n");
   i=0;
   // loop until we get all the values
   while(index<n){
       bool exist=false;
       j=0;
       // loop to check value is already used or not
       while(j<index && exist==false){
           if(existance[j]==arr[i]){
               // set exist true if already used
               exist=true;
               break;
           }
           j++;
       }
       // if value not used
       if(exist==false){
           printf("\n");
           // insert value to exist array
           existance[index]=arr[i];
           index++;
           // print value
           printf("%d ",arr[j]);
           j=i+1;
           // print value until next occurance
           while(arr[j]!=arr[i]){
               printf("%d ",arr[j]);
               j++;
           }
           printf("%d\n",arr[j]);
       }
       i++;
   }
   return 0;
}










