#1



#include <stdio.h>
#include <stdlib.h>
struct node //template of node
{
int data;
struct node *next;
};
void printList(struct node *head) //this method prints the list
{
struct node *temp=head; //assigning head to temp node
while(temp->next!=NULL) //iterating temp node
{
printf("%d->",temp->data); //printing node data
temp=temp->next; //moving a node further
}
printf("%d",temp->data);
}
void Delete_LinkList_Node(struct node **head,int element)
{
struct node *temp=*head; //temporary node to store head reference
struct node *prev=NULL; //it stores previous node of current node
while(temp!=NULL)
{
if(temp->data==element) //if current node matches given key
{
if(prev==NULL) //if it is head node
{
*head=temp->next; //moving head to next node
free(temp); //removing current node from head
temp=*head; //assigning temp to new head
}
else
{
prev->next=temp->next; //assigning previous of current node to next of current node
temp=prev->next; //moving a node further
}
  
  
}
else
{
prev=temp; //storing previous of current
temp=temp->next; //moving a node further
}
  
}

}
int main()
{
struct node *head=NULL;
struct node *last=NULL;
int element;
//int choice=1;
int data=1;
printf("Enter(-1 to stop): ");
scanf("%d",&data);
while(data!=-1) //reading data util -1 is occured
{
if(head==NULL) //if list is empty
{
head=(struct node *) malloc(sizeof(struct node));
head->data=data;
head->next=NULL;
last=head;
}
else //isnerting next to last node
{
struct node *newnode=(struct node *)malloc(sizeof(struct node));
newnode->data=data;
newnode->next=NULL;
last->next=newnode;
last=newnode;
  
}
printf("Enter(-1 to stop): ");
scanf("%d",&data);
  
}
printList(head); //printing current list
printf("\nEnter element to be deleted: ");
scanf("%d",&element);
  
Delete_LinkList_Node(&head,element);

printf("After deletion:");
printList(head);
}








-------------------------------------------------------------------------------------------------------------------------------





#2



#include<stdio.h>
#include<stdlib.h>
//declare node structure
struct node
{
int data;
struct node *next;
};
struct node *insert(struct node *head,int data)
{
//allocate memory for new node
struct node *newnode=(struct node*)malloc(sizeof(struct node*));
newnode->data=data;
if(head==NULL)
{
newnode->next=NULL;
head=newnode;
}
else
{
//more than one node to be added
struct node *p=head;
while(p->next!=NULL)
p=p->next;
p->next=newnode;
newnode->next=NULL;
}
return head;
}
struct node *Delete_Node_value(struct node *head)
{
struct node *p=head,*q,*temp,*temp1,*q1;
int flag;
while(p!=NULL)
{
temp=p;
q1=p;
q=p->next;
flag=0;
while(q!=NULL) //loop through next node in list
{
if(p->data==q->data)
{
temp1=q;
if(q->next!=NULL)
{
q1->next=q->next;
temp1->next=NULL;
}
else
q1->next=NULL;
flag=1;
q=q1->next;
free(temp1); //delete memory once duplicate is found
}
else
{
if(q!=NULL)
q=q->next;
q1=q1->next;
}
}
p=p->next;   
if(flag==1)
{
head=head->next;
temp->next=NULL;
free(temp);
}
}
return head;
}
int main()
{
struct node *head=NULL;
head=insert(head,1);
head=insert(head,2);
head=insert(head,1);
head=insert(head,3);
head=insert(head,2);
head=Delete_Node_value(head);
//display list
struct node *p=head;
printf("Head->");
while(p!=NULL)
{
printf("%d->",p->data);
p=p->next;
}
printf("NULL");
}



-------------------------------------------------------------------------------------------------------------------------------


#3



#include<stdio.h>
#include<stdlib.h>

struct node{
   int data;
   struct node *link;
};

void Delete_Dupl_Node(struct node *start)
{
   /* I am going to use hashing to remove duplicate */
   /* create a hash table and initialize with zero */
   int h[1000000];
   struct node *ptr,*prev;

   for(int i=0;i<=1000000;i++)
       h[i]=0;


   ptr=start;
   prev = ptr; /* set previous pointer */
   h[ptr->data] = h[ptr->data] + 1;
   ptr=ptr->link;
   while(ptr!=NULL)
   {
      
       h[ptr->data] = h[ptr->data] + 1; /* increae the count value of element in hash table */

       /* if count of element is greater than one then delete it */
       if(h[ptr->data] > 1)
       {
           /* for deleting duplicate */
           prev->link = ptr->link;
           //prev = ptr;
           ptr=ptr->link;

       }
       else
       {
           prev = ptr;
           ptr=ptr->link;

       }
   }

  
}

int main()
{
   int item,n,i;
   char ch;
   struct node *start,*temp,*ptr,*new,*prev;
   start=(struct node *)malloc(sizeof(struct node));

   printf("Enter total no. of element of linked list: ");
   scanf("%d",&n);

   /* read 1st element at start node */
   i=0;
   printf("Enter %d element: ",i+1);
   scanf("%d",&start->data);
   start->link=NULL;
  
  
   /* read all other element one by one */
   ptr=start;
   for(i=1;i<n;i++)
   {
       printf("Enter %d element: ",i+1);
       temp=(struct node *)malloc(sizeof(struct node));
       scanf("%d",&temp->data);
       ptr->link=temp;
       ptr=temp;

   }
   ptr->link=NULL;

   /* printont the original list */
   printf("\noriginal list is:\n");
  
   printf("Head->");
   ptr=start;
   while(ptr!=NULL)
   {
       printf("%d->",ptr->data);
       ptr=ptr->link;
   }
   printf("NULL\n");

  
   /* calling Delete_Dupl_Node() function*/

   Delete_Dupl_Node(start);
  

   /* printing the result */
   printf("\nmodified list is:\n");
   printf("Head->");
   ptr=start;
   while(ptr!=NULL)
   {
       printf("%d->",ptr->data);
       ptr=ptr->link;
   }
   printf("NULL\n");

   return 0;

}


-------------------------------------------------------------------------------------------------------------------------------



#4


#include<stdio.h>
#include<stdlib.h>

/* Link list node */
struct Node
{
int data;
struct Node* next;
};

/* Function to reverse a linked list after getting data */
void Reverse_Node(struct Node* head)
{
if (head == NULL)
return;
  
// print the list after the head node is declared
Reverse_Node(head->next);
  
// After everything else is printed, print head
  
printf("%d ->", head->data);
}

void push_Node(struct Node** head_1, char new_data) //push data to a link list
{
struct Node* new_node =
(struct Node*) malloc(sizeof(struct Node)); //allocate the memory to node


new_node->data = new_data; //set the data


new_node->next = (*head_1); //takes the new node to next of the node
(*head_1) = new_node;
}

int main()
{
// create linked list 1->2->3->4
struct Node* head = NULL;
printf("head-> ");
push_Node(&head, 3); ////push node 3 to after 2 on the link list so the final link list will be 1->2->3
push_Node(&head, 2); //push node 2 to after 1 on the link list
push_Node(&head, 1); //push node 1 to starting of link list
  
Reverse_Node(head);
printf("null");

return 0;
}



-------------------------------------------------------------------------------------------------------------------------------



#5




#include<stdio.h>
#include<stdlib.h>

typedef struct node{
   int data;
   struct node*next;
} node;

node* insert(node*head ,int item){
   node*newNode = (node*)malloc(sizeof(node));
   newNode->data = item;
   newNode->next = NULL;
  
   if(head==NULL)return newNode;
  
   node*current = head;
   while(current->next!=NULL)current = current->next;
  
   current->next = newNode;
   return head;
}

float Average_List(node* head){
   float sum=0;
   int count = 0;
  
   while(head){
       sum+=head->data;
       count++;
       head = head->next;
   }
  
   if(count==0)return 0;
   return sum/count;
}

int main(){
   node* head = NULL;
  
   head = insert(head , 1);
   head = insert(head , 2);
   head = insert(head , 3);
  
   printf("Average of linked list : %.2f", Average_List(head));
   
   return 0;
}
