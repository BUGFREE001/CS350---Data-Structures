#1



#include<stdio.h>
#include<stdlib.h>

//structure to represent the nodes of linked list
struct node{
int data;
struct node *next;
};

int length=0;//length variable keeps track of the length of the linked list
struct node *head=NULL;//head and last variables holds the address of the head and tail of the LL
struct node *last=NULL;

void insertNode(int data){//this method is to insert the node at the beginning of the list
//this method is for making a linked list for testing purpose
struct node *newNode=(struct node*)malloc(sizeof(struct node));
newNode->data=data;
struct node *temp=head;
length++;
if(head==NULL){
newNode->next=newNode;
head=newNode;
last=newNode;
}else{
last->next=newNode;
newNode->next=head;
head=newNode;
}

}

//this function is for deleting the node of the linked list based on key value
//it takes in address of the head and key to be deleted
struct node *cirLL_delete_key(struct node *head,int key){
if(head==NULL){//if the list is empty
printf("not necessary to delete anything\n");
}else{length--;
struct node *curr=head;
struct node *prev=last;
if(head->data==key){//if first element is the node to be deleted
prev->next=head->next;
head=head->next;
printf("%d is deleted\n",key);
return head;
}
do{//this is to traverse the list
if(curr->data==key){
printf("%d is deleted\n",key);
prev->next=curr->next;
return head;
}
prev=curr;
curr=curr->next;
}while(curr!=head);
//if the element is not present in the list
printf("Element is not in the list");
length++;

}
return head;
}

//this function is to delete the node based on index
struct node *cirLL_delete_index(struct node *head,int index)
{
int temp=1;
if(head==NULL || index<1 || index>length){//if the list is empty or the index specified is in valid
printf("not necessary to delete anything\n");
return head;
}
struct node *curr=head;
struct node *prev=last;

length--;
do{//traverse the list

if(temp==index && index==1){//if we wish to delete first element
prev->next=head->next;printf("%d is deleted\n",curr->data);
head=head->next;
return head;
}
if(temp==index){
printf("%d is deleted\n",curr->data);
prev->next=curr->next;
return head;
}
temp++;
prev=curr;
curr=curr->next;
}while(curr!=head);

return 0;

}



void printCLL(){//this function will traverse through the list and print the list elements
struct node *temp=head;
do{
printf("%d\n",temp->data);
temp=temp->next;
}while(temp!=head);
}


int main(){//driver method
int tem;
//I wrote a testing code to initially insert 5 elements into the list and then after testing the two mentioned functions
for(int i=1;i<=5;i++){
printf("Enter %d th element",i);
scanf("%d",&tem);
insertNode(tem);
}
printCLL();
printf("\nDeletion with key\n");

printf("Enter key to be deleted");
scanf("%d",&tem);
head=cirLL_delete_key(head,tem);//testing first function
printCLL();

printf("\nDeletion with Index\n");
printf("Enter the index of the element to be deleted\n");
scanf("%d",&tem);
head=cirLL_delete_index(head,tem);//testing second function
printCLL();

}







--------------------------------------------------------------------------------------------------------------------------------------



I gave two ways for question 2, please check below




#2   First way




#include<stdio.h> 
#include<stdlib.h>
#include<malloc.h>
 
struct node // structure type nodedeclaration
{

    int info; // integer field
    struct node *lptr,*rptr; // left pointer, right pointer

};


struct node *ls,*head,*tail,*new,*t,*p;
// different types of variables declaration

int i,x,pos;
void dul_insert(int); // function declaration dul_insert
void dul_display(); //function declaration dul_display
void dul_LL_delete_index(struct node*,int); // function declaration dul_LL_delete_index

void isEmpty();

int main() // main function
{

    isEmpty();
    dul_insert(11); // insert elements 11 into double linked list
    dul_insert(9); // insert elements 9 into double linked list
    dul_insert(13); // insert elements 13 into double linked list
    dul_insert(8); // insert elements 8 into double linked list
    dul_display(); // calling display function
    ls=head;
    isEmpty();

    dul_LL_delete_index(ls,3); // passing linked list and position into function
    dul_display(); // display linked list

return 0;

} // end main function

void isEmpty()
{

    if(head=='\0' && tail=='\0')
        printf("\nList is Empty\n");

    else
        printf("\nList is Not Empty\n");

}
void dul_LL_delete_index(struct node *h,int pos) // function body for dul_LL_delete_index
{

    t=h; // store head address into t
    p=t->rptr; //store next address into p

    for(i=0;i<pos-1;i++) // loop repeat until all elements visited
  {
      p=t; // update t and p
      t=t->rptr;
  }

  printf("\ndel ele is %d\n",t->info);
  p->rptr=t->rptr; // update right address and left address of the index node
  (t->rptr)->lptr=p;
  free(t); // delete index node
} // end dul_LL_delete_index function


void dul_insert(int x) // function body dul_insert
{

    new=(struct node*)malloc(sizeof(struct node)); // create memory for new node
    new->info=x; // store x into node
    new->lptr=NULL; // update left and right address to NULL
    new->rptr=NULL;

    if(head==NULL) // check if list is empty
        head=tail=new; // if true then head and tail are becomes new node

    else // otherwise
    {
        tail->rptr=new; // update tail left and right address fields and new
        new->lptr=tail;
        tail=new;
    }
} // end dul_insert function

void dul_display() // function body for dul_display
{
    t=head; // assign head address to t
    printf("\n");

    while(t!='\0') // Loop until tail goes to NULL
    {
        printf("%d->",t->info); // display integer field fron node
        t=t->rptr; // address moves to next
    }

    printf("\n");
} // end dul_display function






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////





#2   Second way




#include<stdio.h>
#include<stdlib.h>

typedef struct link_list
{
struct link_list *prev;
int info;
struct link_list *next;
}node;

//function prototype
void insert(node**, int);
void dul_LL_delete_index(node**, int);
void display(node*);


//main function
int main()
{
int c, n;
node *head = NULL;

while(1)
{

printf("\n1. Insertion");
printf("\n2. Deletion");
printf("\n3. Display");
printf("\n4. exit");

printf("\n\nEnter a choice(1-4): ");
scanf("%d",&c);

switch(c)
{
case 1:
printf("Enter value: ");
scanf("%d", &n);
insert(&head, n);
break;
case 2:
printf("Enter index: ");
scanf("%d", &n);
dul_LL_delete_index(&head, n);
break;
case 3:
display(head);
break;
case 4: exit(0);
}
}
}


void display(node *ls)
{
while(ls!=NULL){
printf("%d\t",ls->info);
ls=ls->next;
}
}

void insert(node**ls, int n)
{

node *newnode = (node*)malloc(sizeof(node));
newnode->info=n;
newnode->prev=NULL;
newnode->next=NULL;

if(*ls==NULL){
*ls=newnode;
return;
}

node*tmp = *ls;
while(tmp->next!=NULL)
{
tmp = tmp->next;
}

tmp->next=newnode;
newnode->prev=tmp;
}

void dul_LL_delete_index(node**ls, int n)
{
//check if the list is empty
if(*ls==NULL) return;
node *t = *ls;
int i;
for(i=0; t!=NULL&&i<n-1; i++)
{
t = t->next;
}
if(t==NULL) return;

node *p = t->prev;
node *q = t->next;

p->next = q;
if(q!=NULL)
q->prev = p;

free(t);

}





-----------------------------------------------------------------------------------------------------------------------------------




#3




#include <stdio.h>
#include<stdlib.h>
  

struct Node {
int data;
struct Node* prev;
struct Node* next;
};

struct Node* append(struct Node*list , int data)
{
struct Node *newNode = (struct Node*)malloc(sizeof(struct Node));
struct Node* current = list;
newNode->data = data;
newNode->next = NULL;
newNode->prev = NULL;
if(list == NULL) return newNode;
  
while(current->next!=NULL)current = current->next;
  
newNode->prev = current;
current->next = newNode;
return list;
}

void printList(struct Node *head)
{
struct Node *current= head;
while (current!=NULL)
{
printf("%d ",current->data);
current = current->next;
}
printf("\n\n");
}

void Sort(struct Node *head)
{
int isSwap;
struct Node *current,*lptr = NULL;

if (head == NULL)return;
do
{
isSwap = 0;
current = head;

while (current->next != lptr)
{
if (current->data > current->next->data)
{
int temp = current->data;
               current->data = current->next->data ;
               current->next->data = temp;
isSwap = 1;
}
current = current->next;
}
lptr = current;
}
while (isSwap);
}
  
int main()
{
struct Node* head = NULL;
int n,num,i;
// After you type the first number, you should press the "Enter" button in order to type in the next number
printf("Enter number of elements want to insert : ");
scanf("%d",&n);

for(i=0;i<n;i++){
    printf("Enter element : ");
    scanf("%d",&num);
    head = append(head , num);
}

printf("Unsorted List : ");
printList(head);

Sort(head);
   printf("Sorted List : ");
printList(head);

return 0;
}
    
    
    
    
    
    
-----------------------------------------------------------------------------------------------------------------------------------




#4




#include<stdio.h>
#include<stdlib.h>

struct Node {
char value;
struct Node* nextPointer;
struct Node* previousPointer;
};

typedef struct Node NODE;

NODE *head;

void reverse() {

NODE *temp = NULL;   
NODE *traversalNode = head;

while (traversalNode != NULL) {

temp = traversalNode->previousPointer;
traversalNode->previousPointer = traversalNode->nextPointer;
     
   //Storing temp into the traversalNode nextPointer
traversalNode->nextPointer = temp;
traversalNode = traversalNode->previousPointer;
}   

//Checking if the list is not empty or more than one node is present
   //Then set head as the temp->previousPointer
if(temp != NULL )
head = temp->previousPointer;
}

//Below function will insert a new node at the end of the doubly linked list with the value passed as parameter
void insertAtEnd(char value) {

NODE* newNode = (NODE*)malloc(sizeof(NODE));
  
   //Set the newNode->value as the parameter value
   newNode->value = value;
   newNode->nextPointer = NULL;
     
   //Checking the node which we are going to insert is a first node
if (head == NULL) {
newNode->previousPointer = NULL;
head = newNode;
}
   //Otherwise add the node at the end of the doubly linked list
   else{
       //Store the head into the traversalNode pointer
       NODE *traversalNode = head;
      
       //Traverse till we reach the last node
       while (traversalNode->nextPointer != NULL)
           traversalNode = traversalNode->nextPointer;
  
       traversalNode->nextPointer = newNode;
       newNode->previousPointer = traversalNode;
   }
  
}

//Below function will display the value of each node present inside the doubly linked list
void display(){

   //Storing head into the traversalNode
NODE* traversalNode=head;

//Iterate over each node of the doubly linked list
while (traversalNode != NULL) {
printf("%c ", traversalNode->value);
      
       //Point to the next node in the doubly linked list
traversalNode = traversalNode->nextPointer;
}

}

int main(){
   insertAtEnd('r');
   insertAtEnd('A');
   insertAtEnd('d');
   insertAtEnd('a');
   insertAtEnd('R');
   printf("Data in doubly linked list before reversing is\n");
   display();

   reverse();

   printf("\nData in doubly linked list after reversing is\n");
   display();
  
}



