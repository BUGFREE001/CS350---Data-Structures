#2



#include <stdio.h>
#include <stdlib.h>


struct node {
int data;
struct node * next;
}*head;
void createList(int n);
void displayList();
void CirLL_insert(int data, int position);
void insertAtBeginning(int data);
int main()
{
int n, data, choice=1,pos,a;

head = NULL;
printf("Enter the list size: ");
scanf("%d",&n);
createList(n);
displayList();
printf("Enter the position: ");
scanf("%d",&pos);
printf("Enter the element: ");
scanf("%d",&a);
CirLL_insert(pos,a);
displayList();
return 0;
}
void createList(int n)
{
int i, data;
struct node *prevNode, *newNode;

if(n >= 1)
{

head = (struct node *)malloc(sizeof(struct node));

printf("Enter data of 1 node: ");
scanf("%d", &data);

head->data = data;
head->next = NULL;
prevNode = head;
for(i=2; i<=n; i++)
{
newNode = (struct node *)malloc(sizeof(struct node));
printf("Enter data of %d node: ", i);
scanf("%d", &data);
newNode->data = data;
newNode->next = NULL;
prevNode->next = newNode;
prevNode = newNode;
}
prevNode->next = head;
printf("\nCIRCULAR LINKED LIST CREATED SUCCESSFULLY\n");
}
}
void displayList()
{
struct node *current;
int n = 1;

if(head == NULL)
{
printf("List is empty.\n");
}
else
{
current = head;
printf("DATA IN THE LIST:\n");

do {
printf("Data %d = %d\n", n, current->data);

current = current->next;
n++;
}while(current != head);
}
}
void insertAtBeginning(int data)
{
struct node *newNode, *current;

if(head == NULL)
{
printf("List is empty.\n");
}
else
{
newNode = (struct node *)malloc(sizeof(struct node));
newNode->data = data;
newNode->next = head;
current = head;
while(current->next != head)
{
current = current->next;
}
current->next = newNode;
head = newNode;
printf("NODE INSERTED SUCCESSFULLY\n");
}
}
void CirLL_insert(int position, int data)
{
struct node *newNode, *current;
int i;

if(head == NULL)
{
printf("List is empty.\n");
}
else if(position == 1)
{
insertAtBeginning(data);
}
else
{
newNode = (struct node *)malloc(sizeof(struct node));
newNode->data = data;
current = head;
for(i=2; i<=position-1; i++)
{
current = current->next;
}
newNode->next = current->next;
current->next = newNode;
printf("NODE INSERTED SUCCESSFULLY.\n");
}
}






----------------------------------------------------------------------------------------------------------------------------------



#3



#include<stdlib.h>
#include <stdio.h>

typedef struct list{//defining node structure
int data;
struct list *next;
struct list *prev;
}node;

void display(node *head){//display list
node *temp=head;
printf("Head<=>");
while(temp->next!=head){//print elements
printf("%d<=>",temp->data);
temp=temp->next;
}
printf("%d",temp->data);
printf("<=>Head");
}
void insert(node** head,int v){
if(*head==NULL){//if start node, then make it as head and insert.
node *new=(node *)malloc(sizeof(node));
new->data=v;
new->next=new->prev =new;
*head=new;
return;
}
node *last=(*head)->prev;//find last node to insert
node *new=(node *)malloc(sizeof(node));
new->data=v;//create new node and store v in it.
new->next=*head;//make head as next of the new node
(*head)->prev=new;
new->prev=last;
last->next=new;
}
int main()
{
node *head=NULL;
insert(&head,1);
insert(&head,2);//insert elements to list
insert(&head,3);
insert(&head,4);
display(head);//display list
  
return 0;
}




----------------------------------------------------------------------------------------------------------------------------------




#4



#include <stdio.h>
#include <stdlib.h>


struct node {
int data;
struct node * prev;
struct node * next;
}*head, *last;


void createList(int n);
void displayList();

void dul_LL_insert(int data, int position); // Function taken from Question.


int main()
{
int n, data, choice=1;

head = NULL;
last = NULL;

while(choice != 0)
{
printf("============================================\n");
printf("DOUBLY LINKED LIST PROGRAM\n");
printf("============================================\n");
printf("1. Create List\n");
  
printf("2. Insert node - at Index\n");
printf("3. Display list\n");
printf("0. Exit\n");
printf("--------------------------------------------\n");
printf("Enter your choice : ");
  
scanf("%d", &choice);
  
//Choose from different menu operation

  
switch(choice)
{
case 1:
printf("Enter the total number of nodes in list: ");
scanf("%d", &n);
  
createList(n);
break;
  
case 2:
printf("Enter the position where you want to insert new node: ");
scanf("%d", &n);
printf("Enter data of %d node : ", n);
scanf("%d", &data);
  
dul_LL_insert(data, n);
break;
case 3:
displayList();
break;
case 0:
break;
default:
printf("Error! Invalid choice. Please choose between 0-5");
}
  
printf("\n\n");
  
}
return 0;
}


// Creates a doubly linked list of n nodes.
// @n Number of nodes to be created

void createList(int n)
{
int i, data;
struct node *newNode;

if(n >= 1)
{
    
//Create and link the head node

head = (struct node *)malloc(sizeof(struct node));

printf("Enter data of 1 node: ");
scanf("%d", &data);

head->data = data;
head->prev = NULL;
head->next = NULL;

last = head;


//Create and link rest of the n-1 nodes

for(i=2; i<=n; i++)
{
newNode = (struct node *)malloc(sizeof(struct node));

printf("Enter data of %d node: ", i);
scanf("%d", &data);

newNode->data = data;
newNode->prev = last; // Link new node with the previous node
newNode->next = NULL;

last->next = newNode; // Link previous node with the new node
last = newNode; // Make new node as last/previous node
}

printf("\nDOUBLY LINKED LIST CREATED SUCCESSFULLY\n");
}
}


void displayList()
{
struct node * temp;
int n = 1;

if(head == NULL)
{
printf("List is empty.\n");
}
else
{
temp = head;
printf("DATA IN THE LIST:\n");

while(temp != NULL)
{
printf("DATA of %d node = %d\n", n, temp->data);

n++;

//Move the current pointer to next node 
temp = temp->next;
}
}
}


void dul_LL_insert(int data, int position)
{
int i;
struct node * newNode, *temp;

if(head == NULL)
{
printf("Error, List is empty!\n");
}
else
{
temp = head;
i=1;

while(i<position-1 && temp!=NULL)
{
temp = temp->next;
i++;
}

if(temp!=NULL)
{
newNode = (struct node *)malloc(sizeof(struct node));

newNode->data = data;
newNode->next = temp->next; // Connect new node with n+1th node
newNode->prev = temp; // Connect new node with n-1th node

if(temp->next != NULL)
{
//Connect n+1th node with new node 
temp->next->prev = newNode;
}
// Connect n-1th node with new node 
temp->next = newNode;

printf("NODE INSERTED SUCCESSFULLY AT %d POSITION\n", position);
}
else
{
printf("Error, Invalid position\n");
}
}
}
